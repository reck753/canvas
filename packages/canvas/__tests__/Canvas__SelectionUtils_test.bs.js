// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.bs.js";
import * as Canvas__SelectionUtils from "../src/Canvas__SelectionUtils.bs.js";

Jest.describe("SelectionUtils", (function () {
        Jest.describe("sqr", (function () {
                Jest.test("returns the square of a float", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.sqr(2)), 4);
                      }));
              }));
        Jest.describe("dist2", (function () {
                Jest.test("returns the square of the distance between two points", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.dist2(0, 0, 3, 4)), 25);
                      }));
              }));
        Jest.describe("distToLineSegmentSquared", (function () {
                Jest.test("returns the square of the distance from a point to a line segment", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.distToLineSegmentSquared(0, 0, 3, 4, 3, 4)), 25);
                      }));
              }));
        Jest.describe("isPointNearLine", (function () {
                var testLine = {
                  id: "1",
                  toolId: "line",
                  zIndex: 0,
                  label: undefined,
                  start: {
                    x: 1,
                    y: 1
                  },
                  end: {
                    x: 3,
                    y: 4
                  }
                };
                Jest.test("returns true if the point is on then line", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.isPointNearLine(3, 4, testLine, 0)), true);
                      }));
                Jest.test("returns true if the point is within the tolerance distance from the line", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.isPointNearLine(0, 1, testLine, 1)), true);
                      }));
                Jest.test("returns false if the point is not within the tolerance distance from the line", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.isPointNearLine(0, 1, testLine, 0.5)), false);
                      }));
                Jest.test("returns false if the point is not on the line", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.isPointNearLine(0, 0, testLine, 0)), false);
                      }));
              }));
        Jest.describe("normalizeRect", (function () {
                Jest.test("returns the same rect if width and height are both positive", (function () {
                        var rect = {
                          id: "1",
                          toolId: "rect",
                          zIndex: 0,
                          label: undefined,
                          x: 0,
                          y: 0,
                          width: 1,
                          height: 1
                        };
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__SelectionUtils.normalizeRect(rect)), rect);
                      }));
                Jest.test("returns a rect with positive width and height if both are negative and adjusts x and y accordingly", (function () {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__SelectionUtils.normalizeRect({
                                            id: "1",
                                            toolId: "rect",
                                            zIndex: 0,
                                            label: undefined,
                                            x: 1,
                                            y: 1,
                                            width: -1,
                                            height: -1
                                          })), {
                                    id: "1",
                                    toolId: "rect",
                                    zIndex: 0,
                                    label: undefined,
                                    x: 0,
                                    y: 0,
                                    width: 1,
                                    height: 1
                                  });
                      }));
                Jest.test("returns a rect with positive width and height if width is negative", (function () {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__SelectionUtils.normalizeRect({
                                            id: "1",
                                            toolId: "rect",
                                            zIndex: 0,
                                            label: undefined,
                                            x: 1,
                                            y: 1,
                                            width: -1,
                                            height: 1
                                          })), {
                                    id: "1",
                                    toolId: "rect",
                                    zIndex: 0,
                                    label: undefined,
                                    x: 0,
                                    y: 1,
                                    width: 1,
                                    height: 1
                                  });
                      }));
                Jest.test("returns a rect with positive width and height if height is negative", (function () {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__SelectionUtils.normalizeRect({
                                            id: "1",
                                            toolId: "rect",
                                            zIndex: 0,
                                            label: undefined,
                                            x: 1,
                                            y: 1,
                                            width: 1,
                                            height: -1
                                          })), {
                                    id: "1",
                                    toolId: "rect",
                                    zIndex: 0,
                                    label: undefined,
                                    x: 1,
                                    y: 0,
                                    width: 1,
                                    height: 1
                                  });
                      }));
              }));
        Jest.describe("normalizeSelection", (function () {
                Jest.test("returns the same selection if width and height are both positive", (function () {
                        var selection = {
                          x: 0,
                          y: 0,
                          width: 1,
                          height: 1
                        };
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__SelectionUtils.normalizeSelection(selection)), selection);
                      }));
                Jest.test("returns a selection with positive width and height if both are negative and adjusts x and y accordingly", (function () {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__SelectionUtils.normalizeSelection({
                                            x: 1,
                                            y: 1,
                                            width: -1,
                                            height: -1
                                          })), {
                                    x: 0,
                                    y: 0,
                                    width: 1,
                                    height: 1
                                  });
                      }));
                Jest.test("returns a selection with positive width and height if width is negative", (function () {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__SelectionUtils.normalizeSelection({
                                            x: 1,
                                            y: 1,
                                            width: -1,
                                            height: 1
                                          })), {
                                    x: 0,
                                    y: 1,
                                    width: 1,
                                    height: 1
                                  });
                      }));
                Jest.test("returns a selection with positive width and height if height is negative", (function () {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__SelectionUtils.normalizeSelection({
                                            x: 1,
                                            y: 1,
                                            width: 1,
                                            height: -1
                                          })), {
                                    x: 1,
                                    y: 0,
                                    width: 1,
                                    height: 1
                                  });
                      }));
              }));
        Jest.describe("expandSelectionBox", (function () {
                Jest.test("expands the selection box by the tolerance value on all sides", (function () {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__SelectionUtils.expandSelectionBox({
                                            x: 1,
                                            y: 1,
                                            width: 1,
                                            height: 1
                                          }, 2)), {
                                    x: -1,
                                    y: -1,
                                    width: 5,
                                    height: 5
                                  });
                      }));
              }));
        Jest.describe("isPointInsideSelection", (function () {
                Jest.test("returns true if the point is inside the selection", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.isPointInsideSelection({
                                            x: 1,
                                            y: 1,
                                            width: 1,
                                            height: 1
                                          }, 1.5, 1.5, undefined)), true);
                      }));
                Jest.test("returns false if the point is outside the selection", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.isPointInsideSelection({
                                            x: 1,
                                            y: 1,
                                            width: 1,
                                            height: 1
                                          }, 0.5, 0.5, undefined)), false);
                      }));
                Jest.test("returns true if the point is on the edge of the selection", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.isPointInsideSelection({
                                            x: 1,
                                            y: 1,
                                            width: 1,
                                            height: 1
                                          }, 1, 1, undefined)), true);
                      }));
              }));
        Jest.describe("onSegment", (function () {
                Jest.test("returns true if the point is on the line segment", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.onSegment(1, 1, 2, 2, 3, 3)), true);
                      }));
                Jest.test("returns false if the point is not on the line segment", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.onSegment(1, 1, 2, 2, 3, 4)), false);
                      }));
                Jest.test("returns true if the point is on the edge of the line segment", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.onSegment(1, 1, 3, 3, 3, 3)), true);
                      }));
              }));
        Jest.describe("orientation", (function () {
                Jest.test("returns 0 if the points are collinear", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.orientation(100, 100, 200, 200, 300, 300)), 0);
                      }));
                Jest.test("returns 1 if the points are clockwise", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.orientation(100, 300, 200, 200, 200, 300)), 1);
                      }));
                Jest.test("returns 2 if the points are counterclockwise", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.orientation(200, 200, 100, 300, 200, 300)), 2);
                      }));
              }));
        Jest.describe("doIntersect", (function () {
                Jest.test("returns true if the line segments intersect", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.doIntersect(1, 1, 3, 3, 3, 1, 1, 3)), true);
                      }));
                Jest.test("returns false if the line segments do not intersect", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.doIntersect(1, 1, 2, 2, 3, 3, 4, 4)), false);
                      }));
                Jest.test("returns true if the line segments share an endpoint", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.doIntersect(1, 1, 2, 2, 2, 2, 3, 3)), true);
                      }));
                Jest.test("returns true if the line segments intersect in a counterclockwise direction", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.doIntersect(1, 3, 3, 3, 3, 1, 1, 3)), true);
                      }));
              }));
        Jest.describe("lineIntersectsSelection", (function () {
                var testLine = {
                  id: "1",
                  toolId: "line",
                  zIndex: 0,
                  label: undefined,
                  start: {
                    x: 5,
                    y: 5
                  },
                  end: {
                    x: 10,
                    y: 10
                  }
                };
                Jest.test("returns true if the line intersects the selection", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.lineIntersectsSelection(testLine, {
                                            x: 5,
                                            y: 8,
                                            width: 4,
                                            height: 4
                                          }, 0)), true);
                      }));
                Jest.test("returns true if the line intersects the selection's edge", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.lineIntersectsSelection(testLine, {
                                            x: 5,
                                            y: 8,
                                            width: 2,
                                            height: 2
                                          }, 1)), true);
                      }));
                Jest.test("returns false if the line does not intersect the selection", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.lineIntersectsSelection(testLine, {
                                            x: 5,
                                            y: 8,
                                            width: 2,
                                            height: 2
                                          }, 0)), false);
                      }));
                Jest.test("returns false if the line does not intersect the selection", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.lineIntersectsSelection(testLine, {
                                            x: 5,
                                            y: 9,
                                            width: 1,
                                            height: 1
                                          }, 1)), false);
                      }));
              }));
        Jest.describe("rectIntersectsSelection", (function () {
                var testRect = {
                  id: "1",
                  toolId: "rect",
                  zIndex: 0,
                  label: undefined,
                  x: 5,
                  y: 5,
                  width: 5,
                  height: 5
                };
                Jest.test("returns true if the rect intersects the selection", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.rectIntersectsSelection(testRect, {
                                            x: 4,
                                            y: 4,
                                            width: 2,
                                            height: 2
                                          })), true);
                      }));
                Jest.test("returns true if the rect intersects the selection's edge", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.rectIntersectsSelection(testRect, {
                                            x: 4,
                                            y: 4,
                                            width: 1,
                                            height: 1
                                          })), true);
                      }));
                Jest.test("returns false if the rect does not intersect the selection", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.rectIntersectsSelection(testRect, {
                                            x: 3,
                                            y: 3,
                                            width: 1,
                                            height: 1
                                          })), false);
                      }));
                Jest.test("returns false if the rect does not intersect the selection", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.rectIntersectsSelection(testRect, {
                                            x: 11,
                                            y: 11,
                                            width: 2,
                                            height: 2
                                          })), false);
                      }));
                Jest.test("returns true if the rect intersects the selection with negative width and height", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.rectIntersectsSelection(testRect, {
                                            x: 11,
                                            y: 11,
                                            width: -2,
                                            height: -2
                                          })), true);
                      }));
                Jest.test("return false if the rect does not intersect the selection with negative width and height", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.rectIntersectsSelection(testRect, {
                                            x: 13,
                                            y: 13,
                                            width: -1,
                                            height: -1
                                          })), false);
                      }));
              }));
        Jest.describe("isClick", (function () {
                Jest.test("returns true if the selection is smaller than the tolerance", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.isClick({
                                            x: 1,
                                            y: 1,
                                            width: 1,
                                            height: 1
                                          }, 2)), true);
                      }));
                Jest.test("returns false if the selection is larger than the tolerance", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.isClick({
                                            x: 1,
                                            y: 1,
                                            width: 2,
                                            height: 2
                                          }, 2)), false);
                      }));
              }));
        Jest.describe("didMove", (function () {
                Jest.test("returns true if the origin and target are different", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.didMove({
                                            origin: {
                                              x: 1,
                                              y: 1
                                            },
                                            target: {
                                              x: 2,
                                              y: 2
                                            }
                                          })), true);
                      }));
                Jest.test("returns false if the origin and target are the same", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.didMove({
                                            origin: {
                                              x: 1,
                                              y: 1
                                            },
                                            target: {
                                              x: 1,
                                              y: 1
                                            }
                                          })), false);
                      }));
              }));
        Jest.describe("isPointNearPoint", (function () {
                Jest.test("returns true if point is exactly on top of the other point without tolerance", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.isPointNearPoint(50, 50, 50, 50, 0)), true);
                      }));
                Jest.test("returns true if point is exactly on top of the other point with tolerance", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.isPointNearPoint(50, 50, 50, 50, 10)), true);
                      }));
                Jest.test("returns false if point is not on top of the other point without tolerance", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.isPointNearPoint(50, 50, 51, 51, 0)), false);
                      }));
                Jest.test("returns true if point is not on top of the other point and is within given tolerance", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.isPointNearPoint(50, 50, 51, 51, 2)), true);
                      }));
                Jest.test("returns true if point is not on top of the other point and is within given tolerance", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.isPointNearPoint(50, 50, 49, 49, 2)), true);
                      }));
                Jest.test("returns false if point is not on top of the other point and is not within given tolerance", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.isPointNearPoint(50, 50, 53, 53, 2)), false);
                      }));
                Jest.test("returns false if point is not on top of the other point and is not within given tolerance", (function () {
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__SelectionUtils.isPointNearPoint(50, 50, 47, 47, 2)), false);
                      }));
              }));
      }));

var Models;

var SelectionUtils;

export {
  Models ,
  SelectionUtils ,
}
/*  Not a pure module */
