// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.bs.js";
import * as Canvas__ElementUtils from "../src/Canvas__ElementUtils.bs.js";

Jest.describe("ElementUtils", (function () {
        Jest.describe("getElementId", (function () {
                Jest.test("returns the id of a line", (function () {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__ElementUtils.getElementId({
                                            type: "Line",
                                            _0: {
                                              id: "line1",
                                              toolId: "line",
                                              zIndex: 1,
                                              label: undefined,
                                              start: {
                                                x: 0,
                                                y: 0
                                              },
                                              end: {
                                                x: 100,
                                                y: 100
                                              }
                                            }
                                          })), "line1");
                      }));
                Jest.test("returns the id of a rect", (function () {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__ElementUtils.getElementId({
                                            type: "Rect",
                                            _0: {
                                              id: "rect1",
                                              toolId: "rect",
                                              zIndex: 1,
                                              label: undefined,
                                              x: 0,
                                              y: 0,
                                              width: 100,
                                              height: 100
                                            }
                                          })), "rect1");
                      }));
              }));
        Jest.describe("getElementZIndex", (function () {
                Jest.test("returns the zIndex of a line", (function () {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__ElementUtils.getElementZIndex({
                                            type: "Line",
                                            _0: {
                                              id: "line1",
                                              toolId: "line",
                                              zIndex: 1,
                                              label: undefined,
                                              start: {
                                                x: 0,
                                                y: 0
                                              },
                                              end: {
                                                x: 100,
                                                y: 100
                                              }
                                            }
                                          })), 1);
                      }));
                Jest.test("returns the zIndex of a rect", (function () {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__ElementUtils.getElementZIndex({
                                            type: "Rect",
                                            _0: {
                                              id: "rect1",
                                              toolId: "rect",
                                              zIndex: 1,
                                              label: undefined,
                                              x: 0,
                                              y: 0,
                                              width: 100,
                                              height: 100
                                            }
                                          })), 1);
                      }));
              }));
        Jest.describe("updateElementAtPosition", (function () {
                Jest.test("updates the element at a position", (function () {
                        var rect = {
                          type: "Rect",
                          _0: {
                            id: "rect1",
                            toolId: "rect",
                            zIndex: 1,
                            label: undefined,
                            x: 0,
                            y: 0,
                            width: 100,
                            height: 100
                          }
                        };
                        var elements = [
                          {
                            type: "Line",
                            _0: {
                              id: "line1",
                              toolId: "line",
                              zIndex: 1,
                              label: undefined,
                              start: {
                                x: 0,
                                y: 0
                              },
                              end: {
                                x: 100,
                                y: 100
                              }
                            }
                          },
                          rect
                        ];
                        var updatedLine = {
                          type: "Line",
                          _0: {
                            id: "line1",
                            toolId: "line",
                            zIndex: 1,
                            label: undefined,
                            start: {
                              x: 0,
                              y: 0
                            },
                            end: {
                              x: 100,
                              y: 100
                            }
                          }
                        };
                        var updatedElements = Canvas__ElementUtils.updateElementAtPosition(elements, 0, updatedLine);
                        return Jest.Expect.toEqual(Jest.Expect.expect(updatedElements), [
                                    updatedLine,
                                    rect
                                  ]);
                      }));
              }));
        Jest.describe("isSelected", (function () {
                Jest.test("returns true if the element is selected", (function () {
                        var selectedElementIds = [Canvas__ElementUtils.getElementId({
                                type: "Line",
                                _0: {
                                  id: "line1",
                                  toolId: "line",
                                  zIndex: 1,
                                  label: undefined,
                                  start: {
                                    x: 0,
                                    y: 0
                                  },
                                  end: {
                                    x: 100,
                                    y: 100
                                  }
                                }
                              })];
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__ElementUtils.isSelected("line1", selectedElementIds)), true);
                      }));
                Jest.test("returns false if the element is not selected", (function () {
                        var selectedElementIds = [Canvas__ElementUtils.getElementId({
                                type: "Line",
                                _0: {
                                  id: "line1",
                                  toolId: "line",
                                  zIndex: 1,
                                  label: undefined,
                                  start: {
                                    x: 0,
                                    y: 0
                                  },
                                  end: {
                                    x: 100,
                                    y: 100
                                  }
                                }
                              })];
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__ElementUtils.isSelected("rect1", selectedElementIds)), false);
                      }));
              }));
        Jest.describe("getElementAtPoint", (function () {
                Jest.test("returns the element at a point", (function () {
                        var line = {
                          type: "Line",
                          _0: {
                            id: "line1",
                            toolId: "line",
                            zIndex: 1,
                            label: undefined,
                            start: {
                              x: 0,
                              y: 0
                            },
                            end: {
                              x: 100,
                              y: 100
                            }
                          }
                        };
                        var elements = [
                          line,
                          {
                            type: "Rect",
                            _0: {
                              id: "rect1",
                              toolId: "rect",
                              zIndex: 1,
                              label: undefined,
                              x: 0,
                              y: 0,
                              width: 100,
                              height: 100
                            }
                          }
                        ];
                        var element = Canvas__ElementUtils.getElementAtPoint(elements, 50, 50, undefined);
                        return Jest.Expect.toEqual(Jest.Expect.expect(element), line);
                      }));
                Jest.test("does not return an element if there is no element at the point", (function () {
                        var elements = [
                          {
                            type: "Line",
                            _0: {
                              id: "line1",
                              toolId: "line",
                              zIndex: 1,
                              label: undefined,
                              start: {
                                x: 0,
                                y: 0
                              },
                              end: {
                                x: 100,
                                y: 100
                              }
                            }
                          },
                          {
                            type: "Rect",
                            _0: {
                              id: "rect1",
                              toolId: "rect",
                              zIndex: 1,
                              label: undefined,
                              x: 0,
                              y: 0,
                              width: 100,
                              height: 100
                            }
                          }
                        ];
                        var element = Canvas__ElementUtils.getElementAtPoint(elements, 200, 200, undefined);
                        return Jest.Expect.toEqual(Jest.Expect.expect(element), undefined);
                      }));
              }));
        Jest.describe("moveSelectedElements", (function () {
                Jest.test("moves the selected elements", (function () {
                        var rect = {
                          type: "Rect",
                          _0: {
                            id: "rect1",
                            toolId: "rect",
                            zIndex: 1,
                            label: undefined,
                            x: 0,
                            y: 0,
                            width: 100,
                            height: 100
                          }
                        };
                        var line = {
                          type: "Line",
                          _0: {
                            id: "line1",
                            toolId: "line",
                            zIndex: 1,
                            label: undefined,
                            start: {
                              x: 0,
                              y: 0
                            },
                            end: {
                              x: 100,
                              y: 100
                            }
                          }
                        };
                        var elements = [
                          line,
                          rect
                        ];
                        var selectedElementIds = [Canvas__ElementUtils.getElementId(line)];
                        var movedElements = Canvas__ElementUtils.moveSelectedElements(elements, {
                              origin: {
                                x: 0,
                                y: 0
                              },
                              target: {
                                x: 0,
                                y: 0
                              }
                            }, selectedElementIds, 50, 50);
                        return Jest.Expect.toEqual(Jest.Expect.expect(movedElements), [
                                    {
                                      type: "Line",
                                      _0: {
                                        id: "line1",
                                        toolId: "line",
                                        zIndex: 1,
                                        label: undefined,
                                        start: {
                                          x: 50,
                                          y: 50
                                        },
                                        end: {
                                          x: 150,
                                          y: 150
                                        }
                                      }
                                    },
                                    rect
                                  ]);
                      }));
                Jest.test("moves the selected elements while preserving the label", (function () {
                        var rect = {
                          type: "Rect",
                          _0: {
                            id: "rect1",
                            toolId: "rect",
                            zIndex: 1,
                            label: "A",
                            x: 0,
                            y: 0,
                            width: 100,
                            height: 100
                          }
                        };
                        var line = {
                          type: "Line",
                          _0: {
                            id: "line1",
                            toolId: "line",
                            zIndex: 1,
                            label: "B",
                            start: {
                              x: 0,
                              y: 0
                            },
                            end: {
                              x: 100,
                              y: 100
                            }
                          }
                        };
                        var line2 = {
                          type: "Line",
                          _0: {
                            id: "line2",
                            toolId: "line",
                            zIndex: 1,
                            label: undefined,
                            start: {
                              x: 0,
                              y: 0
                            },
                            end: {
                              x: 200,
                              y: 200
                            }
                          }
                        };
                        var elements = [
                          line,
                          line2,
                          rect
                        ];
                        var selectedElementIds = [
                          Canvas__ElementUtils.getElementId(line),
                          Canvas__ElementUtils.getElementId(line2)
                        ];
                        var movedElements = Canvas__ElementUtils.moveSelectedElements(elements, {
                              origin: {
                                x: 0,
                                y: 0
                              },
                              target: {
                                x: 0,
                                y: 0
                              }
                            }, selectedElementIds, 50, 50);
                        return Jest.Expect.toEqual(Jest.Expect.expect(movedElements), [
                                    {
                                      type: "Line",
                                      _0: {
                                        id: "line1",
                                        toolId: "line",
                                        zIndex: 1,
                                        label: "B",
                                        start: {
                                          x: 50,
                                          y: 50
                                        },
                                        end: {
                                          x: 150,
                                          y: 150
                                        }
                                      }
                                    },
                                    {
                                      type: "Line",
                                      _0: {
                                        id: "line2",
                                        toolId: "line",
                                        zIndex: 1,
                                        label: undefined,
                                        start: {
                                          x: 50,
                                          y: 50
                                        },
                                        end: {
                                          x: 250,
                                          y: 250
                                        }
                                      }
                                    },
                                    rect
                                  ]);
                      }));
              }));
        Jest.describe("isElementSelected", (function () {
                Jest.test("returns true if the element is selected", (function () {
                        var line = {
                          type: "Line",
                          _0: {
                            id: "line1",
                            toolId: "line",
                            zIndex: 1,
                            label: undefined,
                            start: {
                              x: 0,
                              y: 0
                            },
                            end: {
                              x: 100,
                              y: 100
                            }
                          }
                        };
                        var selectedElementIds = [Canvas__ElementUtils.getElementId(line)];
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__ElementUtils.isElementSelected(line, selectedElementIds)), true);
                      }));
                Jest.test("returns false if the element is not selected", (function () {
                        var selectedElementIds = [Canvas__ElementUtils.getElementId({
                                type: "Line",
                                _0: {
                                  id: "line1",
                                  toolId: "line",
                                  zIndex: 1,
                                  label: undefined,
                                  start: {
                                    x: 0,
                                    y: 0
                                  },
                                  end: {
                                    x: 100,
                                    y: 100
                                  }
                                }
                              })];
                        return Jest.Expect.toBe(Jest.Expect.expect(Canvas__ElementUtils.isElementSelected({
                                            type: "Rect",
                                            _0: {
                                              id: "rect1",
                                              toolId: "rect",
                                              zIndex: 1,
                                              label: undefined,
                                              x: 0,
                                              y: 0,
                                              width: 100,
                                              height: 100
                                            }
                                          }, selectedElementIds)), false);
                      }));
              }));
        Jest.describe("getFirstElementId", (function () {
                Jest.test("returns the id of the first element", (function () {
                        var elements = [
                          {
                            type: "Line",
                            _0: {
                              id: "line1",
                              toolId: "line",
                              zIndex: 1,
                              label: undefined,
                              start: {
                                x: 0,
                                y: 0
                              },
                              end: {
                                x: 100,
                                y: 100
                              }
                            }
                          },
                          {
                            type: "Rect",
                            _0: {
                              id: "rect1",
                              toolId: "rect",
                              zIndex: 1,
                              label: undefined,
                              x: 0,
                              y: 0,
                              width: 100,
                              height: 100
                            }
                          }
                        ];
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__ElementUtils.getFirstElementId(elements)), "line1");
                      }));
              }));
        Jest.describe("roundNumberBySnapGridSize", (function () {
                Jest.test("rounds a number by a snap grid size (10, 5)->10", (function () {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__ElementUtils.roundNumberBySnapGridSize(10, 5)), 10);
                      }));
                Jest.test("rounds a number by a snap grid size (11, 5)->10", (function () {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__ElementUtils.roundNumberBySnapGridSize(11, 5)), 10);
                      }));
                Jest.test("rounds a number by a snap grid size (12, 5)->15", (function () {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__ElementUtils.roundNumberBySnapGridSize(12, 5)), 10);
                      }));
                Jest.test("rounds a number by a snap grid size (12.5, 5)->15", (function () {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__ElementUtils.roundNumberBySnapGridSize(12.5, 5)), 15);
                      }));
                Jest.test("rounds a number by a snap grid size (13, 5)->15", (function () {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__ElementUtils.roundNumberBySnapGridSize(13, 5)), 15);
                      }));
                Jest.test("rounds a number by a snap grid size (14, 5)->15", (function () {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__ElementUtils.roundNumberBySnapGridSize(14, 5)), 15);
                      }));
                Jest.test("rounds a number by a snap grid size (15, 5)->15", (function () {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Canvas__ElementUtils.roundNumberBySnapGridSize(15, 5)), 15);
                      }));
              }));
        Jest.describe("snapElementToGrid", (function () {
                Jest.test("snaps a line to a grid", (function () {
                        var snappedLine = Canvas__ElementUtils.snapElementToGrid({
                              type: "Line",
                              _0: {
                                id: "line1",
                                toolId: "line",
                                zIndex: 1,
                                label: undefined,
                                start: {
                                  x: 12,
                                  y: 14
                                },
                                end: {
                                  x: 21,
                                  y: 29
                                }
                              }
                            }, 5);
                        return Jest.Expect.toEqual(Jest.Expect.expect(snappedLine), {
                                    type: "Line",
                                    _0: {
                                      id: "line1",
                                      toolId: "line",
                                      zIndex: 1,
                                      label: undefined,
                                      start: {
                                        x: 10,
                                        y: 15
                                      },
                                      end: {
                                        x: 20,
                                        y: 30
                                      }
                                    }
                                  });
                      }));
                Jest.test("snaps a rect to a grid", (function () {
                        var snappedRect = Canvas__ElementUtils.snapElementToGrid({
                              type: "Rect",
                              _0: {
                                id: "rect1",
                                toolId: "rect",
                                zIndex: 1,
                                label: undefined,
                                x: 12,
                                y: 14,
                                width: 21,
                                height: 29
                              }
                            }, 5);
                        return Jest.Expect.toEqual(Jest.Expect.expect(snappedRect), {
                                    type: "Rect",
                                    _0: {
                                      id: "rect1",
                                      toolId: "rect",
                                      zIndex: 1,
                                      label: undefined,
                                      x: 10,
                                      y: 15,
                                      width: 20,
                                      height: 30
                                    }
                                  });
                      }));
              }));
      }));

var Models;

var ElementUtils;

export {
  Models ,
  ElementUtils ,
}
/*  Not a pure module */
