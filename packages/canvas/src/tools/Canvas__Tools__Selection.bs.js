// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";
import * as Canvas__StateUtils from "../Canvas__StateUtils.bs.js";
import * as Canvas__ElementUtils from "../Canvas__ElementUtils.bs.js";
import * as Canvas__SelectionUtils from "../Canvas__SelectionUtils.bs.js";

function tool_onStart(param) {
  var tools = param.tools;
  var updateStore = param.updateStore;
  var match = param.store;
  var selectedElementIds = match.selectedElementIds;
  var snapToGrid = match.snapToGrid;
  var clientY = param.clientY;
  var clientX = param.clientX;
  var state = Canvas__StateUtils.getSelectionState(match.state);
  if (state === undefined) {
    return ;
  }
  if (typeof state === "object") {
    return ;
  }
  var clickedElement = Canvas__ElementUtils.getElementAtPointWithTolerance(match.elements, clientX, clientY);
  if (clickedElement === undefined) {
    return updateStore(function (prev) {
                return {
                        state: {
                          type: "Selection",
                          _0: {
                            type: "Selecting",
                            _0: {
                              x: clientX,
                              y: clientY,
                              width: 0,
                              height: 0
                            }
                          }
                        },
                        snapToGrid: prev.snapToGrid,
                        selectedToolId: prev.selectedToolId,
                        selectedElementIds: [],
                        elements: prev.elements
                      };
              });
  }
  var match$1;
  if (typeof snapToGrid !== "object") {
    match$1 = [
      clientX,
      clientY
    ];
  } else {
    var gridSize = snapToGrid._0;
    match$1 = [
      Canvas__ElementUtils.roundNumberBySnapGridSize(clientX, gridSize),
      Canvas__ElementUtils.roundNumberBySnapGridSize(clientY, gridSize)
    ];
  }
  var moveY = match$1[1];
  var moveX = match$1[0];
  var initialMove_origin = {
    x: moveX,
    y: moveY
  };
  var initialMove_target = {
    x: moveX,
    y: moveY
  };
  var initialMove = {
    origin: initialMove_origin,
    target: initialMove_target
  };
  var match$2 = selectedElementIds.length;
  if (match$2 === 0) {
    return updateStore(function (prev) {
                return {
                        state: {
                          type: "Selection",
                          _0: {
                            type: "Moving",
                            _0: initialMove
                          }
                        },
                        snapToGrid: prev.snapToGrid,
                        selectedToolId: prev.selectedToolId,
                        selectedElementIds: [Canvas__ElementUtils.getElementId(clickedElement)],
                        elements: prev.elements
                      };
              });
  }
  if (match$2 === 1) {
    if (selectedElementIds[0] === Canvas__ElementUtils.getElementId(clickedElement)) {
      var corner = Canvas__SelectionUtils.getElementCorner(clientX, clientY, clickedElement, tools);
      if (corner === undefined) {
        return updateStore(function (prev) {
                    return {
                            state: {
                              type: "Selection",
                              _0: {
                                type: "Moving",
                                _0: initialMove
                              }
                            },
                            snapToGrid: prev.snapToGrid,
                            selectedToolId: prev.selectedToolId,
                            selectedElementIds: prev.selectedElementIds,
                            elements: prev.elements
                          };
                  });
      }
      var clickedElementTool = tools.find(function (tool) {
            return tool.toolId === Canvas__ElementUtils.getToolId(clickedElement);
          });
      var match$3 = Core__Option.map(clickedElementTool, (function (tool) {
              return tool.engine;
            }));
      if (match$3 !== undefined && typeof match$3 === "object" && match$3.type !== "Rect") {
        var match$4 = match$3._0;
        var canResizeStart = Core__Option.getOr(match$4.canResizeStart, true);
        var canResizeEnd = Core__Option.getOr(match$4.canResizeEnd, true);
        if (corner === "Start" && canResizeStart || corner === "End" && canResizeEnd) {
          param.target.style.cursor = "grabbing";
        }
        
      }
      return updateStore(function (prev) {
                  return {
                          state: {
                            type: "Selection",
                            _0: {
                              type: "Resizing",
                              _0: corner
                            }
                          },
                          snapToGrid: prev.snapToGrid,
                          selectedToolId: prev.selectedToolId,
                          selectedElementIds: prev.selectedElementIds,
                          elements: prev.elements
                        };
                });
    }
    if (selectedElementIds[0] !== Canvas__ElementUtils.getElementId(clickedElement)) {
      return updateStore(function (prev) {
                  return {
                          state: {
                            type: "Selection",
                            _0: {
                              type: "Moving",
                              _0: initialMove
                            }
                          },
                          snapToGrid: prev.snapToGrid,
                          selectedToolId: prev.selectedToolId,
                          selectedElementIds: [Canvas__ElementUtils.getElementId(clickedElement)],
                          elements: prev.elements
                        };
                });
    }
    
  }
  var isClickedElementAlreadySelected = Canvas__ElementUtils.isElementSelected(clickedElement, selectedElementIds);
  if (isClickedElementAlreadySelected) {
    return updateStore(function (prev) {
                return {
                        state: {
                          type: "Selection",
                          _0: {
                            type: "Moving",
                            _0: initialMove
                          }
                        },
                        snapToGrid: prev.snapToGrid,
                        selectedToolId: prev.selectedToolId,
                        selectedElementIds: prev.selectedElementIds,
                        elements: prev.elements
                      };
              });
  } else {
    return updateStore(function (prev) {
                return {
                        state: {
                          type: "Selection",
                          _0: {
                            type: "Moving",
                            _0: initialMove
                          }
                        },
                        snapToGrid: prev.snapToGrid,
                        selectedToolId: prev.selectedToolId,
                        selectedElementIds: [Canvas__ElementUtils.getElementId(clickedElement)],
                        elements: prev.elements
                      };
              });
  }
}

function tool_onMove(param) {
  var tools = param.tools;
  var target = param.target;
  var updateStore = param.updateStore;
  var match = param.store;
  var elements = match.elements;
  var selectedElementIds = match.selectedElementIds;
  var snapToGrid = match.snapToGrid;
  var clientY = param.clientY;
  var clientX = param.clientX;
  var state = Canvas__StateUtils.getSelectionState(match.state);
  if (state === undefined) {
    return ;
  }
  if (typeof state !== "object") {
    target.style.cursor = "default";
    var match$1 = selectedElementIds.length;
    if (match$1 !== 1) {
      return ;
    }
    var selectedElementId = selectedElementIds[0];
    var selectedElement = elements.find(function (element) {
          return Canvas__ElementUtils.getElementId(element) === selectedElementId;
        });
    var cursor = Core__Option.map(selectedElement, (function (selectedElement) {
            if (selectedElement.type === "Line") {
              return Canvas__SelectionUtils.getLineCursor(clientX, clientY, selectedElement._0, tools);
            } else {
              return Canvas__SelectionUtils.getRectCursor(clientX, clientY, selectedElement._0, tools);
            }
          }));
    return Core__Option.forEach(cursor, (function (cursor) {
                  target.style.cursor = Canvas__SelectionUtils.getCursorType(cursor);
                }));
  }
  switch (state.type) {
    case "Selecting" :
        var selection = state._0;
        var selectedElements = elements.filter(function (element) {
              return Canvas__ElementUtils.intersectsSelection(element, selection);
            });
        var y = selection.y;
        var x = selection.x;
        return updateStore(function (prev) {
                    return {
                            state: {
                              type: "Selection",
                              _0: {
                                type: "Selecting",
                                _0: {
                                  x: x,
                                  y: y,
                                  width: clientX - x,
                                  height: clientY - y
                                }
                              }
                            },
                            snapToGrid: prev.snapToGrid,
                            selectedToolId: prev.selectedToolId,
                            selectedElementIds: selectedElements.map(Canvas__ElementUtils.getElementId),
                            elements: prev.elements
                          };
                  });
    case "Moving" :
        var move = state._0;
        target.style.cursor = "move";
        var match$2;
        if (typeof snapToGrid !== "object") {
          match$2 = [
            clientX,
            clientY
          ];
        } else {
          var gridSize = snapToGrid._0;
          match$2 = [
            Canvas__ElementUtils.roundNumberBySnapGridSize(clientX, gridSize),
            Canvas__ElementUtils.roundNumberBySnapGridSize(clientY, gridSize)
          ];
        }
        var clientY$1 = match$2[1];
        var clientX$1 = match$2[0];
        return updateStore(function (prev) {
                    return {
                            state: {
                              type: "Selection",
                              _0: {
                                type: "Moving",
                                _0: {
                                  origin: move.origin,
                                  target: {
                                    x: clientX$1,
                                    y: clientY$1
                                  }
                                }
                              }
                            },
                            snapToGrid: prev.snapToGrid,
                            selectedToolId: prev.selectedToolId,
                            selectedElementIds: prev.selectedElementIds,
                            elements: Canvas__ElementUtils.moveSelectedElements(prev.elements, move, prev.selectedElementIds, clientX$1, clientY$1)
                          };
                  });
    case "Resizing" :
        var corner = state._0;
        var match$3 = selectedElementIds.length;
        if (match$3 !== 1) {
          return ;
        }
        var selectedElementId$1 = selectedElementIds[0];
        var selectedElement$1 = elements.find(function (element) {
              return Canvas__ElementUtils.getElementId(element) === selectedElementId$1;
            });
        var match$4;
        if (typeof snapToGrid !== "object") {
          match$4 = [
            clientX,
            clientY
          ];
        } else {
          var gridSize$1 = snapToGrid._0;
          match$4 = [
            Canvas__ElementUtils.roundNumberBySnapGridSize(clientX, gridSize$1),
            Canvas__ElementUtils.roundNumberBySnapGridSize(clientY, gridSize$1)
          ];
        }
        var clientY$2 = match$4[1];
        var clientX$2 = match$4[0];
        return Core__Option.forEach(selectedElement$1, (function (selectedElement) {
                      if (selectedElement.type === "Line") {
                        var resizedLine = Canvas__SelectionUtils.resizeLine(selectedElement._0, clientX$2, clientY$2, corner);
                        return updateStore(function (prev) {
                                    return {
                                            state: prev.state,
                                            snapToGrid: prev.snapToGrid,
                                            selectedToolId: prev.selectedToolId,
                                            selectedElementIds: prev.selectedElementIds,
                                            elements: Canvas__ElementUtils.resizeLineInElements(prev.elements, resizedLine)
                                          };
                                  });
                      }
                      var resizedRect = Canvas__SelectionUtils.resizeRect(selectedElement._0, clientX$2, clientY$2, corner);
                      var cursor = Canvas__SelectionUtils.getRectCursor(clientX$2, clientY$2, resizedRect, tools);
                      target.style.cursor = Canvas__SelectionUtils.getCursorType(cursor);
                      updateStore(function (prev) {
                            return {
                                    state: prev.state,
                                    snapToGrid: prev.snapToGrid,
                                    selectedToolId: prev.selectedToolId,
                                    selectedElementIds: prev.selectedElementIds,
                                    elements: Canvas__ElementUtils.resizeRectInElements(prev.elements, resizedRect)
                                  };
                          });
                    }));
    
  }
}

function tool_onEnd(param) {
  var target = param.target;
  var updateStore = param.updateStore;
  var state = Canvas__StateUtils.getSelectionState(param.store.state);
  if (state === undefined) {
    return ;
  }
  if (typeof state !== "object") {
    return updateStore(function (prev) {
                return {
                        state: {
                          type: "Selection",
                          _0: "Idle"
                        },
                        snapToGrid: prev.snapToGrid,
                        selectedToolId: prev.selectedToolId,
                        selectedElementIds: prev.selectedElementIds,
                        elements: prev.elements
                      };
              });
  }
  switch (state.type) {
    case "Selecting" :
        var selection = state._0;
        if (Canvas__SelectionUtils.isClick(selection, 2)) {
          return updateStore(function (prev) {
                      return {
                              state: {
                                type: "Selection",
                                _0: "Idle"
                              },
                              snapToGrid: prev.snapToGrid,
                              selectedToolId: prev.selectedToolId,
                              selectedElementIds: prev.selectedElementIds,
                              elements: prev.elements
                            };
                    });
        } else {
          return updateStore(function (prev) {
                      var selectedElements = prev.elements.filter(function (element) {
                            return Canvas__ElementUtils.intersectsSelection(element, selection);
                          });
                      return {
                              state: {
                                type: "Selection",
                                _0: "Idle"
                              },
                              snapToGrid: prev.snapToGrid,
                              selectedToolId: prev.selectedToolId,
                              selectedElementIds: selectedElements.map(Canvas__ElementUtils.getElementId),
                              elements: prev.elements
                            };
                    });
        }
    case "Moving" :
        var move = state._0;
        target.style.cursor = "default";
        if (Canvas__SelectionUtils.didMove(move)) {
          return updateStore(function (prev) {
                      return {
                              state: {
                                type: "Selection",
                                _0: "Idle"
                              },
                              snapToGrid: prev.snapToGrid,
                              selectedToolId: prev.selectedToolId,
                              selectedElementIds: prev.selectedElementIds,
                              elements: prev.elements
                            };
                    });
        } else {
          return updateStore(function (prev) {
                      var clickedElement = Canvas__ElementUtils.getElementAtPoint(prev.elements, move.target.x, move.target.y, undefined);
                      if (clickedElement !== undefined && Canvas__ElementUtils.isElementSelected(clickedElement, prev.selectedElementIds)) {
                        return {
                                state: {
                                  type: "Selection",
                                  _0: "Idle"
                                },
                                snapToGrid: prev.snapToGrid,
                                selectedToolId: prev.selectedToolId,
                                selectedElementIds: [Canvas__ElementUtils.getElementId(clickedElement)],
                                elements: prev.elements
                              };
                      }
                      return {
                              state: {
                                type: "Selection",
                                _0: "Idle"
                              },
                              snapToGrid: prev.snapToGrid,
                              selectedToolId: prev.selectedToolId,
                              selectedElementIds: prev.selectedElementIds,
                              elements: prev.elements
                            };
                    });
        }
    case "Resizing" :
        switch (state._0) {
          case "Start" :
          case "End" :
              break;
          default:
            return updateStore(function (prev) {
                        return {
                                state: {
                                  type: "Selection",
                                  _0: "Idle"
                                },
                                snapToGrid: prev.snapToGrid,
                                selectedToolId: prev.selectedToolId,
                                selectedElementIds: prev.selectedElementIds,
                                elements: prev.elements
                              };
                      });
        }
        target.style.cursor = "grab";
        return updateStore(function (prev) {
                    return {
                            state: {
                              type: "Selection",
                              _0: "Idle"
                            },
                            snapToGrid: prev.snapToGrid,
                            selectedToolId: prev.selectedToolId,
                            selectedElementIds: prev.selectedElementIds,
                            elements: prev.elements
                          };
                  });
    
  }
}

var tool = {
  toolId: "selection",
  engine: "Selection",
  onStart: tool_onStart,
  onMove: tool_onMove,
  onEnd: tool_onEnd
};

export {
  tool ,
}
/* Canvas__ElementUtils Not a pure module */
